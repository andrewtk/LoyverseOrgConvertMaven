/*
 * This file is generated by jOOQ.
*/
package DBlorg.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import DBlorg.Indexes;
import DBlorg.Keys;
import DBlorg.Lorg;
import DBlorg.tables.records.QaUsersRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QaUsers extends TableImpl<QaUsersRecord> {

    private static final long serialVersionUID = 503820901;

    /**
     * The reference instance of <code>DBlorg.qa_users</code>
     */
    public static final QaUsers QA_USERS = new QaUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QaUsersRecord> getRecordType() {
        return QaUsersRecord.class;
    }

    /**
     * The column <code>DBlorg.qa_users.userid</code>.
     */
    public final TableField<QaUsersRecord, UInteger> USERID = createField("userid", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>DBlorg.qa_users.sellerid</code>.
     */
    public final TableField<QaUsersRecord, Integer> SELLERID = createField("sellerid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DBlorg.qa_users.owner</code>.
     */
    public final TableField<QaUsersRecord, Byte> OWNER = createField("owner", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>DBlorg.qa_users.created</code>.
     */
    public final TableField<QaUsersRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>DBlorg.qa_users.createip</code>.
     */
    public final TableField<QaUsersRecord, UInteger> CREATEIP = createField("createip", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>DBlorg.qa_users.email</code>.
     */
    public final TableField<QaUsersRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(80).nullable(false), this, "");

    /**
     * The column <code>DBlorg.qa_users.handle</code>.
     */
    public final TableField<QaUsersRecord, String> HANDLE = createField("handle", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>DBlorg.qa_users.avatarblobid</code>.
     */
    public final TableField<QaUsersRecord, ULong> AVATARBLOBID = createField("avatarblobid", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>DBlorg.qa_users.avatarwidth</code>.
     */
    public final TableField<QaUsersRecord, UShort> AVATARWIDTH = createField("avatarwidth", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED, this, "");

    /**
     * The column <code>DBlorg.qa_users.avatarheight</code>.
     */
    public final TableField<QaUsersRecord, UShort> AVATARHEIGHT = createField("avatarheight", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED, this, "");

    /**
     * The column <code>DBlorg.qa_users.passsalt</code>.
     */
    public final TableField<QaUsersRecord, byte[]> PASSSALT = createField("passsalt", org.jooq.impl.SQLDataType.BINARY(16), this, "");

    /**
     * The column <code>DBlorg.qa_users.passcheck</code>.
     */
    public final TableField<QaUsersRecord, byte[]> PASSCHECK = createField("passcheck", org.jooq.impl.SQLDataType.BINARY(20), this, "");

    /**
     * The column <code>DBlorg.qa_users.level</code>.
     */
    public final TableField<QaUsersRecord, UByte> LEVEL = createField("level", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>DBlorg.qa_users.loggedin</code>.
     */
    public final TableField<QaUsersRecord, Timestamp> LOGGEDIN = createField("loggedin", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>DBlorg.qa_users.loginip</code>.
     */
    public final TableField<QaUsersRecord, UInteger> LOGINIP = createField("loginip", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>DBlorg.qa_users.written</code>.
     */
    public final TableField<QaUsersRecord, Timestamp> WRITTEN = createField("written", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>DBlorg.qa_users.writeip</code>.
     */
    public final TableField<QaUsersRecord, UInteger> WRITEIP = createField("writeip", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>DBlorg.qa_users.emailcode</code>.
     */
    public final TableField<QaUsersRecord, String> EMAILCODE = createField("emailcode", org.jooq.impl.SQLDataType.CHAR(8).nullable(false).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>DBlorg.qa_users.sessioncode</code>.
     */
    public final TableField<QaUsersRecord, String> SESSIONCODE = createField("sessioncode", org.jooq.impl.SQLDataType.CHAR(8).nullable(false).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>DBlorg.qa_users.sessionsource</code>.
     */
    public final TableField<QaUsersRecord, String> SESSIONSOURCE = createField("sessionsource", org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>DBlorg.qa_users.flags</code>.
     */
    public final TableField<QaUsersRecord, UShort> FLAGS = createField("flags", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED)), this, "");

    /**
     * The column <code>DBlorg.qa_users.wallposts</code>.
     */
    public final TableField<QaUsersRecord, Integer> WALLPOSTS = createField("wallposts", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>DBlorg.qa_users.oemail</code>.
     */
    public final TableField<QaUsersRecord, String> OEMAIL = createField("oemail", org.jooq.impl.SQLDataType.VARCHAR(80), this, "");

    /**
     * Create a <code>DBlorg.qa_users</code> table reference
     */
    public QaUsers() {
        this(DSL.name("qa_users"), null);
    }

    /**
     * Create an aliased <code>DBlorg.qa_users</code> table reference
     */
    public QaUsers(String alias) {
        this(DSL.name(alias), QA_USERS);
    }

    /**
     * Create an aliased <code>DBlorg.qa_users</code> table reference
     */
    public QaUsers(Name alias) {
        this(alias, QA_USERS);
    }

    private QaUsers(Name alias, Table<QaUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private QaUsers(Name alias, Table<QaUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lorg.LORG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QA_USERS_CREATED, Indexes.QA_USERS_EMAIL, Indexes.QA_USERS_HANDLE, Indexes.QA_USERS_LEVEL, Indexes.QA_USERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QaUsersRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_QA_USERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QaUsersRecord> getPrimaryKey() {
        return Keys.KEY_QA_USERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QaUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<QaUsersRecord>>asList(Keys.KEY_QA_USERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QaUsers as(String alias) {
        return new QaUsers(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QaUsers as(Name alias) {
        return new QaUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QaUsers rename(String name) {
        return new QaUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QaUsers rename(Name name) {
        return new QaUsers(name, null);
    }
}

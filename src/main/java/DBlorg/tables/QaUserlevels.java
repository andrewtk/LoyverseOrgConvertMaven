/*
 * This file is generated by jOOQ.
*/
package DBlorg.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import DBlorg.Indexes;
import DBlorg.Keys;
import DBlorg.Lorg;
import DBlorg.tables.records.QaUserlevelsRecord;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QaUserlevels extends TableImpl<QaUserlevelsRecord> {

    private static final long serialVersionUID = 1660513884;

    /**
     * The reference instance of <code>DBlorg.qa_userlevels</code>
     */
    public static final QaUserlevels QA_USERLEVELS = new QaUserlevels();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QaUserlevelsRecord> getRecordType() {
        return QaUserlevelsRecord.class;
    }

    /**
     * The column <code>DBlorg.qa_userlevels.userid</code>.
     */
    public final TableField<QaUserlevelsRecord, String> USERID = createField("userid", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>DBlorg.qa_userlevels.entitytype</code>.
     */
    public final TableField<QaUserlevelsRecord, String> ENTITYTYPE = createField("entitytype", org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>DBlorg.qa_userlevels.entityid</code>.
     */
    public final TableField<QaUserlevelsRecord, UInteger> ENTITYID = createField("entityid", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>DBlorg.qa_userlevels.level</code>.
     */
    public final TableField<QaUserlevelsRecord, UByte> LEVEL = createField("level", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, this, "");

    /**
     * Create a <code>DBlorg.qa_userlevels</code> table reference
     */
    public QaUserlevels() {
        this(DSL.name("qa_userlevels"), null);
    }

    /**
     * Create an aliased <code>DBlorg.qa_userlevels</code> table reference
     */
    public QaUserlevels(String alias) {
        this(DSL.name(alias), QA_USERLEVELS);
    }

    /**
     * Create an aliased <code>DBlorg.qa_userlevels</code> table reference
     */
    public QaUserlevels(Name alias) {
        this(alias, QA_USERLEVELS);
    }

    private QaUserlevels(Name alias, Table<QaUserlevelsRecord> aliased) {
        this(alias, aliased, null);
    }

    private QaUserlevels(Name alias, Table<QaUserlevelsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lorg.LORG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QA_USERLEVELS_ENTITYTYPE, Indexes.QA_USERLEVELS_USERID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QaUserlevelsRecord>> getKeys() {
        return Arrays.<UniqueKey<QaUserlevelsRecord>>asList(Keys.KEY_QA_USERLEVELS_USERID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QaUserlevels as(String alias) {
        return new QaUserlevels(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QaUserlevels as(Name alias) {
        return new QaUserlevels(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QaUserlevels rename(String name) {
        return new QaUserlevels(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QaUserlevels rename(Name name) {
        return new QaUserlevels(name, null);
    }
}

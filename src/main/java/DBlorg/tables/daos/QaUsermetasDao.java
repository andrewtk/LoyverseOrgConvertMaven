/*
 * This file is generated by jOOQ.
*/
package DBlorg.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import DBlorg.tables.pojos.QaUsermetas;
import DBlorg.tables.records.QaUsermetasRecord;
import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QaUsermetasDao extends DAOImpl<QaUsermetasRecord, QaUsermetas, Record2<String, String>> {

    /**
     * Create a new QaUsermetasDao without any configuration
     */
    public QaUsermetasDao() {
        super(DBlorg.tables.QaUsermetas.QA_USERMETAS, QaUsermetas.class);
    }

    /**
     * Create a new QaUsermetasDao with an attached configuration
     */
    public QaUsermetasDao(Configuration configuration) {
        super(DBlorg.tables.QaUsermetas.QA_USERMETAS, QaUsermetas.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Record2<String, String> getId(QaUsermetas object) {
        return compositeKeyRecord(object.getUserid(), object.getTitle());
    }

    /**
     * Fetch records that have <code>userid IN (values)</code>
     */
    public List<QaUsermetas> fetchByUserid(String... values) {
        return fetch(DBlorg.tables.QaUsermetas.QA_USERMETAS.USERID, values);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<QaUsermetas> fetchByTitle(String... values) {
        return fetch(DBlorg.tables.QaUsermetas.QA_USERMETAS.TITLE, values);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<QaUsermetas> fetchByContent(String... values) {
        return fetch(DBlorg.tables.QaUsermetas.QA_USERMETAS.CONTENT, values);
    }
}

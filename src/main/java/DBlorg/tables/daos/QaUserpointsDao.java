/*
 * This file is generated by jOOQ.
*/
package DBlorg.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import DBlorg.tables.pojos.QaUserpoints;
import DBlorg.tables.records.QaUserpointsRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QaUserpointsDao extends DAOImpl<QaUserpointsRecord, QaUserpoints, String> {

    /**
     * Create a new QaUserpointsDao without any configuration
     */
    public QaUserpointsDao() {
        super(DBlorg.tables.QaUserpoints.QA_USERPOINTS, QaUserpoints.class);
    }

    /**
     * Create a new QaUserpointsDao with an attached configuration
     */
    public QaUserpointsDao(Configuration configuration) {
        super(DBlorg.tables.QaUserpoints.QA_USERPOINTS, QaUserpoints.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(QaUserpoints object) {
        return object.getUserid();
    }

    /**
     * Fetch records that have <code>userid IN (values)</code>
     */
    public List<QaUserpoints> fetchByUserid(String... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.USERID, values);
    }

    /**
     * Fetch a unique record that has <code>userid = value</code>
     */
    public QaUserpoints fetchOneByUserid(String value) {
        return fetchOne(DBlorg.tables.QaUserpoints.QA_USERPOINTS.USERID, value);
    }

    /**
     * Fetch records that have <code>points IN (values)</code>
     */
    public List<QaUserpoints> fetchByPoints(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.POINTS, values);
    }

    /**
     * Fetch records that have <code>qposts IN (values)</code>
     */
    public List<QaUserpoints> fetchByQposts(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.QPOSTS, values);
    }

    /**
     * Fetch records that have <code>aposts IN (values)</code>
     */
    public List<QaUserpoints> fetchByAposts(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.APOSTS, values);
    }

    /**
     * Fetch records that have <code>cposts IN (values)</code>
     */
    public List<QaUserpoints> fetchByCposts(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.CPOSTS, values);
    }

    /**
     * Fetch records that have <code>aselects IN (values)</code>
     */
    public List<QaUserpoints> fetchByAselects(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.ASELECTS, values);
    }

    /**
     * Fetch records that have <code>aselecteds IN (values)</code>
     */
    public List<QaUserpoints> fetchByAselecteds(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.ASELECTEDS, values);
    }

    /**
     * Fetch records that have <code>qupvotes IN (values)</code>
     */
    public List<QaUserpoints> fetchByQupvotes(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.QUPVOTES, values);
    }

    /**
     * Fetch records that have <code>qdownvotes IN (values)</code>
     */
    public List<QaUserpoints> fetchByQdownvotes(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.QDOWNVOTES, values);
    }

    /**
     * Fetch records that have <code>aupvotes IN (values)</code>
     */
    public List<QaUserpoints> fetchByAupvotes(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.AUPVOTES, values);
    }

    /**
     * Fetch records that have <code>adownvotes IN (values)</code>
     */
    public List<QaUserpoints> fetchByAdownvotes(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.ADOWNVOTES, values);
    }

    /**
     * Fetch records that have <code>qvoteds IN (values)</code>
     */
    public List<QaUserpoints> fetchByQvoteds(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.QVOTEDS, values);
    }

    /**
     * Fetch records that have <code>avoteds IN (values)</code>
     */
    public List<QaUserpoints> fetchByAvoteds(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.AVOTEDS, values);
    }

    /**
     * Fetch records that have <code>upvoteds IN (values)</code>
     */
    public List<QaUserpoints> fetchByUpvoteds(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.UPVOTEDS, values);
    }

    /**
     * Fetch records that have <code>downvoteds IN (values)</code>
     */
    public List<QaUserpoints> fetchByDownvoteds(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.DOWNVOTEDS, values);
    }

    /**
     * Fetch records that have <code>bonus IN (values)</code>
     */
    public List<QaUserpoints> fetchByBonus(Integer... values) {
        return fetch(DBlorg.tables.QaUserpoints.QA_USERPOINTS.BONUS, values);
    }
}

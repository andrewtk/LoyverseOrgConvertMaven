/*
 * This file is generated by jOOQ.
*/
package DBlorg.tables.daos;


import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import DBlorg.tables.pojos.QaUsers;
import DBlorg.tables.records.QaUsersRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QaUsersDao extends DAOImpl<QaUsersRecord, QaUsers, UInteger> {

    /**
     * Create a new QaUsersDao without any configuration
     */
    public QaUsersDao() {
        super(DBlorg.tables.QaUsers.QA_USERS, QaUsers.class);
    }

    /**
     * Create a new QaUsersDao with an attached configuration
     */
    public QaUsersDao(Configuration configuration) {
        super(DBlorg.tables.QaUsers.QA_USERS, QaUsers.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected UInteger getId(QaUsers object) {
        return object.getUserid();
    }

    /**
     * Fetch records that have <code>userid IN (values)</code>
     */
    public List<QaUsers> fetchByUserid(UInteger... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.USERID, values);
    }

    /**
     * Fetch a unique record that has <code>userid = value</code>
     */
    public QaUsers fetchOneByUserid(UInteger value) {
        return fetchOne(DBlorg.tables.QaUsers.QA_USERS.USERID, value);
    }

    /**
     * Fetch records that have <code>sellerid IN (values)</code>
     */
    public List<QaUsers> fetchBySellerid(Integer... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.SELLERID, values);
    }

    /**
     * Fetch records that have <code>owner IN (values)</code>
     */
    public List<QaUsers> fetchByOwner(Byte... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.OWNER, values);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<QaUsers> fetchByCreated(Timestamp... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.CREATED, values);
    }

    /**
     * Fetch records that have <code>createip IN (values)</code>
     */
    public List<QaUsers> fetchByCreateip(UInteger... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.CREATEIP, values);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<QaUsers> fetchByEmail(String... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.EMAIL, values);
    }

    /**
     * Fetch records that have <code>handle IN (values)</code>
     */
    public List<QaUsers> fetchByHandle(String... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.HANDLE, values);
    }

    /**
     * Fetch records that have <code>avatarblobid IN (values)</code>
     */
    public List<QaUsers> fetchByAvatarblobid(ULong... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.AVATARBLOBID, values);
    }

    /**
     * Fetch records that have <code>avatarwidth IN (values)</code>
     */
    public List<QaUsers> fetchByAvatarwidth(UShort... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.AVATARWIDTH, values);
    }

    /**
     * Fetch records that have <code>avatarheight IN (values)</code>
     */
    public List<QaUsers> fetchByAvatarheight(UShort... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.AVATARHEIGHT, values);
    }

    /**
     * Fetch records that have <code>passsalt IN (values)</code>
     */
    public List<QaUsers> fetchByPasssalt(byte[]... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.PASSSALT, values);
    }

    /**
     * Fetch records that have <code>passcheck IN (values)</code>
     */
    public List<QaUsers> fetchByPasscheck(byte[]... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.PASSCHECK, values);
    }

    /**
     * Fetch records that have <code>level IN (values)</code>
     */
    public List<QaUsers> fetchByLevel(UByte... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.LEVEL, values);
    }

    /**
     * Fetch records that have <code>loggedin IN (values)</code>
     */
    public List<QaUsers> fetchByLoggedin(Timestamp... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.LOGGEDIN, values);
    }

    /**
     * Fetch records that have <code>loginip IN (values)</code>
     */
    public List<QaUsers> fetchByLoginip(UInteger... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.LOGINIP, values);
    }

    /**
     * Fetch records that have <code>written IN (values)</code>
     */
    public List<QaUsers> fetchByWritten(Timestamp... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.WRITTEN, values);
    }

    /**
     * Fetch records that have <code>writeip IN (values)</code>
     */
    public List<QaUsers> fetchByWriteip(UInteger... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.WRITEIP, values);
    }

    /**
     * Fetch records that have <code>emailcode IN (values)</code>
     */
    public List<QaUsers> fetchByEmailcode(String... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.EMAILCODE, values);
    }

    /**
     * Fetch records that have <code>sessioncode IN (values)</code>
     */
    public List<QaUsers> fetchBySessioncode(String... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.SESSIONCODE, values);
    }

    /**
     * Fetch records that have <code>sessionsource IN (values)</code>
     */
    public List<QaUsers> fetchBySessionsource(String... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.SESSIONSOURCE, values);
    }

    /**
     * Fetch records that have <code>flags IN (values)</code>
     */
    public List<QaUsers> fetchByFlags(UShort... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.FLAGS, values);
    }

    /**
     * Fetch records that have <code>wallposts IN (values)</code>
     */
    public List<QaUsers> fetchByWallposts(Integer... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.WALLPOSTS, values);
    }

    /**
     * Fetch records that have <code>oemail IN (values)</code>
     */
    public List<QaUsers> fetchByOemail(String... values) {
        return fetch(DBlorg.tables.QaUsers.QA_USERS.OEMAIL, values);
    }
}

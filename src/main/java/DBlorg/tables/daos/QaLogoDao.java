/*
 * This file is generated by jOOQ.
*/
package DBlorg.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import DBlorg.tables.pojos.QaLogo;
import DBlorg.tables.records.QaLogoRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QaLogoDao extends DAOImpl<QaLogoRecord, QaLogo, Integer> {

    /**
     * Create a new QaLogoDao without any configuration
     */
    public QaLogoDao() {
        super(DBlorg.tables.QaLogo.QA_LOGO, QaLogo.class);
    }

    /**
     * Create a new QaLogoDao with an attached configuration
     */
    public QaLogoDao(Configuration configuration) {
        super(DBlorg.tables.QaLogo.QA_LOGO, QaLogo.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(QaLogo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<QaLogo> fetchById(Integer... values) {
        return fetch(DBlorg.tables.QaLogo.QA_LOGO.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public QaLogo fetchOneById(Integer value) {
        return fetchOne(DBlorg.tables.QaLogo.QA_LOGO.ID, value);
    }

    /**
     * Fetch records that have <code>userid IN (values)</code>
     */
    public List<QaLogo> fetchByUserid(String... values) {
        return fetch(DBlorg.tables.QaLogo.QA_LOGO.USERID, values);
    }

    /**
     * Fetch records that have <code>logourl IN (values)</code>
     */
    public List<QaLogo> fetchByLogourl(String... values) {
        return fetch(DBlorg.tables.QaLogo.QA_LOGO.LOGOURL, values);
    }
}

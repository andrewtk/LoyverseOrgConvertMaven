/*
 * This file is generated by jOOQ.
*/
package DBlorg.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import DBlorg.tables.pojos.QaTopics;
import DBlorg.tables.records.QaTopicsRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QaTopicsDao extends DAOImpl<QaTopicsRecord, QaTopics, Integer> {

    /**
     * Create a new QaTopicsDao without any configuration
     */
    public QaTopicsDao() {
        super(DBlorg.tables.QaTopics.QA_TOPICS, QaTopics.class);
    }

    /**
     * Create a new QaTopicsDao with an attached configuration
     */
    public QaTopicsDao(Configuration configuration) {
        super(DBlorg.tables.QaTopics.QA_TOPICS, QaTopics.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(QaTopics object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<QaTopics> fetchById(Integer... values) {
        return fetch(DBlorg.tables.QaTopics.QA_TOPICS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public QaTopics fetchOneById(Integer value) {
        return fetchOne(DBlorg.tables.QaTopics.QA_TOPICS.ID, value);
    }

    /**
     * Fetch records that have <code>topic IN (values)</code>
     */
    public List<QaTopics> fetchByTopic(String... values) {
        return fetch(DBlorg.tables.QaTopics.QA_TOPICS.TOPIC, values);
    }
}

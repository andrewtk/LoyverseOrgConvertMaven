/*
 * This file is generated by jOOQ.
*/
package DBlorg.tables.daos;


import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import DBlorg.enums.QaPostsType;
import DBlorg.tables.pojos.QaPosts;
import DBlorg.tables.records.QaPostsRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QaPostsDao extends DAOImpl<QaPostsRecord, QaPosts, UInteger> {

    /**
     * Create a new QaPostsDao without any configuration
     */
    public QaPostsDao() {
        super(DBlorg.tables.QaPosts.QA_POSTS, QaPosts.class);
    }

    /**
     * Create a new QaPostsDao with an attached configuration
     */
    public QaPostsDao(Configuration configuration) {
        super(DBlorg.tables.QaPosts.QA_POSTS, QaPosts.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected UInteger getId(QaPosts object) {
        return object.getPostid();
    }

    /**
     * Fetch records that have <code>postid IN (values)</code>
     */
    public List<QaPosts> fetchByPostid(UInteger... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.POSTID, values);
    }

    /**
     * Fetch a unique record that has <code>postid = value</code>
     */
    public QaPosts fetchOneByPostid(UInteger value) {
        return fetchOne(DBlorg.tables.QaPosts.QA_POSTS.POSTID, value);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<QaPosts> fetchByType(QaPostsType... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.TYPE, values);
    }

    /**
     * Fetch records that have <code>parentid IN (values)</code>
     */
    public List<QaPosts> fetchByParentid(UInteger... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.PARENTID, values);
    }

    /**
     * Fetch records that have <code>categoryid IN (values)</code>
     */
    public List<QaPosts> fetchByCategoryid(UInteger... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.CATEGORYID, values);
    }

    /**
     * Fetch records that have <code>catidpath1 IN (values)</code>
     */
    public List<QaPosts> fetchByCatidpath1(UInteger... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.CATIDPATH1, values);
    }

    /**
     * Fetch records that have <code>catidpath2 IN (values)</code>
     */
    public List<QaPosts> fetchByCatidpath2(UInteger... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.CATIDPATH2, values);
    }

    /**
     * Fetch records that have <code>catidpath3 IN (values)</code>
     */
    public List<QaPosts> fetchByCatidpath3(UInteger... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.CATIDPATH3, values);
    }

    /**
     * Fetch records that have <code>acount IN (values)</code>
     */
    public List<QaPosts> fetchByAcount(UShort... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.ACOUNT, values);
    }

    /**
     * Fetch records that have <code>amaxvote IN (values)</code>
     */
    public List<QaPosts> fetchByAmaxvote(UShort... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.AMAXVOTE, values);
    }

    /**
     * Fetch records that have <code>selchildid IN (values)</code>
     */
    public List<QaPosts> fetchBySelchildid(UInteger... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.SELCHILDID, values);
    }

    /**
     * Fetch records that have <code>closedbyid IN (values)</code>
     */
    public List<QaPosts> fetchByClosedbyid(UInteger... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.CLOSEDBYID, values);
    }

    /**
     * Fetch records that have <code>userid IN (values)</code>
     */
    public List<QaPosts> fetchByUserid(String... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.USERID, values);
    }

    /**
     * Fetch records that have <code>cookieid IN (values)</code>
     */
    public List<QaPosts> fetchByCookieid(ULong... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.COOKIEID, values);
    }

    /**
     * Fetch records that have <code>createip IN (values)</code>
     */
    public List<QaPosts> fetchByCreateip(UInteger... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.CREATEIP, values);
    }

    /**
     * Fetch records that have <code>lastuserid IN (values)</code>
     */
    public List<QaPosts> fetchByLastuserid(String... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.LASTUSERID, values);
    }

    /**
     * Fetch records that have <code>lastip IN (values)</code>
     */
    public List<QaPosts> fetchByLastip(UInteger... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.LASTIP, values);
    }

    /**
     * Fetch records that have <code>upvotes IN (values)</code>
     */
    public List<QaPosts> fetchByUpvotes(UShort... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.UPVOTES, values);
    }

    /**
     * Fetch records that have <code>downvotes IN (values)</code>
     */
    public List<QaPosts> fetchByDownvotes(UShort... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.DOWNVOTES, values);
    }

    /**
     * Fetch records that have <code>netvotes IN (values)</code>
     */
    public List<QaPosts> fetchByNetvotes(Short... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.NETVOTES, values);
    }

    /**
     * Fetch records that have <code>lastviewip IN (values)</code>
     */
    public List<QaPosts> fetchByLastviewip(UInteger... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.LASTVIEWIP, values);
    }

    /**
     * Fetch records that have <code>views IN (values)</code>
     */
    public List<QaPosts> fetchByViews(UInteger... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.VIEWS, values);
    }

    /**
     * Fetch records that have <code>hotness IN (values)</code>
     */
    public List<QaPosts> fetchByHotness(Double... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.HOTNESS, values);
    }

    /**
     * Fetch records that have <code>flagcount IN (values)</code>
     */
    public List<QaPosts> fetchByFlagcount(UByte... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.FLAGCOUNT, values);
    }

    /**
     * Fetch records that have <code>format IN (values)</code>
     */
    public List<QaPosts> fetchByFormat(String... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.FORMAT, values);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<QaPosts> fetchByCreated(Timestamp... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.CREATED, values);
    }

    /**
     * Fetch records that have <code>updated IN (values)</code>
     */
    public List<QaPosts> fetchByUpdated(Timestamp... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.UPDATED, values);
    }

    /**
     * Fetch records that have <code>updatetype IN (values)</code>
     */
    public List<QaPosts> fetchByUpdatetype(String... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.UPDATETYPE, values);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<QaPosts> fetchByTitle(String... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.TITLE, values);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<QaPosts> fetchByContent(String... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.CONTENT, values);
    }

    /**
     * Fetch records that have <code>tags IN (values)</code>
     */
    public List<QaPosts> fetchByTags(String... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.TAGS, values);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<QaPosts> fetchByName(String... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.NAME, values);
    }

    /**
     * Fetch records that have <code>notify IN (values)</code>
     */
    public List<QaPosts> fetchByNotify(String... values) {
        return fetch(DBlorg.tables.QaPosts.QA_POSTS.NOTIFY, values);
    }
}

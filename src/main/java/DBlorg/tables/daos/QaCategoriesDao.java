/*
 * This file is generated by jOOQ.
*/
package DBlorg.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import DBlorg.tables.pojos.QaCategories;
import DBlorg.tables.records.QaCategoriesRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QaCategoriesDao extends DAOImpl<QaCategoriesRecord, QaCategories, UInteger> {

    /**
     * Create a new QaCategoriesDao without any configuration
     */
    public QaCategoriesDao() {
        super(DBlorg.tables.QaCategories.QA_CATEGORIES, QaCategories.class);
    }

    /**
     * Create a new QaCategoriesDao with an attached configuration
     */
    public QaCategoriesDao(Configuration configuration) {
        super(DBlorg.tables.QaCategories.QA_CATEGORIES, QaCategories.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected UInteger getId(QaCategories object) {
        return object.getCategoryid();
    }

    /**
     * Fetch records that have <code>categoryid IN (values)</code>
     */
    public List<QaCategories> fetchByCategoryid(UInteger... values) {
        return fetch(DBlorg.tables.QaCategories.QA_CATEGORIES.CATEGORYID, values);
    }

    /**
     * Fetch a unique record that has <code>categoryid = value</code>
     */
    public QaCategories fetchOneByCategoryid(UInteger value) {
        return fetchOne(DBlorg.tables.QaCategories.QA_CATEGORIES.CATEGORYID, value);
    }

    /**
     * Fetch records that have <code>parentid IN (values)</code>
     */
    public List<QaCategories> fetchByParentid(UInteger... values) {
        return fetch(DBlorg.tables.QaCategories.QA_CATEGORIES.PARENTID, values);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<QaCategories> fetchByTitle(String... values) {
        return fetch(DBlorg.tables.QaCategories.QA_CATEGORIES.TITLE, values);
    }

    /**
     * Fetch records that have <code>tags IN (values)</code>
     */
    public List<QaCategories> fetchByTags(String... values) {
        return fetch(DBlorg.tables.QaCategories.QA_CATEGORIES.TAGS, values);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<QaCategories> fetchByContent(String... values) {
        return fetch(DBlorg.tables.QaCategories.QA_CATEGORIES.CONTENT, values);
    }

    /**
     * Fetch records that have <code>qcount IN (values)</code>
     */
    public List<QaCategories> fetchByQcount(UInteger... values) {
        return fetch(DBlorg.tables.QaCategories.QA_CATEGORIES.QCOUNT, values);
    }

    /**
     * Fetch records that have <code>position IN (values)</code>
     */
    public List<QaCategories> fetchByPosition(UShort... values) {
        return fetch(DBlorg.tables.QaCategories.QA_CATEGORIES.POSITION, values);
    }

    /**
     * Fetch records that have <code>backpath IN (values)</code>
     */
    public List<QaCategories> fetchByBackpath(String... values) {
        return fetch(DBlorg.tables.QaCategories.QA_CATEGORIES.BACKPATH, values);
    }
}

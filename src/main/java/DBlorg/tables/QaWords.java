/*
 * This file is generated by jOOQ.
*/
package DBlorg.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import DBlorg.Indexes;
import DBlorg.Keys;
import DBlorg.Lorg;
import DBlorg.tables.records.QaWordsRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QaWords extends TableImpl<QaWordsRecord> {

    private static final long serialVersionUID = 1153388476;

    /**
     * The reference instance of <code>DBlorg.qa_words</code>
     */
    public static final QaWords QA_WORDS = new QaWords();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QaWordsRecord> getRecordType() {
        return QaWordsRecord.class;
    }

    /**
     * The column <code>DBlorg.qa_words.wordid</code>.
     */
    public final TableField<QaWordsRecord, UInteger> WORDID = createField("wordid", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>DBlorg.qa_words.word</code>.
     */
    public final TableField<QaWordsRecord, String> WORD = createField("word", org.jooq.impl.SQLDataType.VARCHAR(80).nullable(false), this, "");

    /**
     * The column <code>DBlorg.qa_words.titlecount</code>.
     */
    public final TableField<QaWordsRecord, UInteger> TITLECOUNT = createField("titlecount", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>DBlorg.qa_words.contentcount</code>.
     */
    public final TableField<QaWordsRecord, UInteger> CONTENTCOUNT = createField("contentcount", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>DBlorg.qa_words.tagwordcount</code>.
     */
    public final TableField<QaWordsRecord, UInteger> TAGWORDCOUNT = createField("tagwordcount", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>DBlorg.qa_words.tagcount</code>.
     */
    public final TableField<QaWordsRecord, UInteger> TAGCOUNT = createField("tagcount", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * Create a <code>DBlorg.qa_words</code> table reference
     */
    public QaWords() {
        this(DSL.name("qa_words"), null);
    }

    /**
     * Create an aliased <code>DBlorg.qa_words</code> table reference
     */
    public QaWords(String alias) {
        this(DSL.name(alias), QA_WORDS);
    }

    /**
     * Create an aliased <code>DBlorg.qa_words</code> table reference
     */
    public QaWords(Name alias) {
        this(alias, QA_WORDS);
    }

    private QaWords(Name alias, Table<QaWordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private QaWords(Name alias, Table<QaWordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lorg.LORG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QA_WORDS_PRIMARY, Indexes.QA_WORDS_TAGCOUNT, Indexes.QA_WORDS_WORD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QaWordsRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_QA_WORDS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QaWordsRecord> getPrimaryKey() {
        return Keys.KEY_QA_WORDS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QaWordsRecord>> getKeys() {
        return Arrays.<UniqueKey<QaWordsRecord>>asList(Keys.KEY_QA_WORDS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QaWords as(String alias) {
        return new QaWords(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QaWords as(Name alias) {
        return new QaWords(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QaWords rename(String name) {
        return new QaWords(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QaWords rename(Name name) {
        return new QaWords(name, null);
    }
}

/*
 * This file is generated by jOOQ.
*/
package DBlorg.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import DBlorg.Indexes;
import DBlorg.Keys;
import DBlorg.Lorg;
import DBlorg.tables.records.QaTopicsRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QaTopics extends TableImpl<QaTopicsRecord> {

    private static final long serialVersionUID = 1490337576;

    /**
     * The reference instance of <code>DBlorg.qa_topics</code>
     */
    public static final QaTopics QA_TOPICS = new QaTopics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QaTopicsRecord> getRecordType() {
        return QaTopicsRecord.class;
    }

    /**
     * The column <code>DBlorg.qa_topics.id</code>.
     */
    public final TableField<QaTopicsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>DBlorg.qa_topics.topic</code>.
     */
    public final TableField<QaTopicsRecord, String> TOPIC = createField("topic", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>DBlorg.qa_topics</code> table reference
     */
    public QaTopics() {
        this(DSL.name("qa_topics"), null);
    }

    /**
     * Create an aliased <code>DBlorg.qa_topics</code> table reference
     */
    public QaTopics(String alias) {
        this(DSL.name(alias), QA_TOPICS);
    }

    /**
     * Create an aliased <code>DBlorg.qa_topics</code> table reference
     */
    public QaTopics(Name alias) {
        this(alias, QA_TOPICS);
    }

    private QaTopics(Name alias, Table<QaTopicsRecord> aliased) {
        this(alias, aliased, null);
    }

    private QaTopics(Name alias, Table<QaTopicsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lorg.LORG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QA_TOPICS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QaTopicsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_QA_TOPICS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QaTopicsRecord> getPrimaryKey() {
        return Keys.KEY_QA_TOPICS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QaTopicsRecord>> getKeys() {
        return Arrays.<UniqueKey<QaTopicsRecord>>asList(Keys.KEY_QA_TOPICS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QaTopics as(String alias) {
        return new QaTopics(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QaTopics as(Name alias) {
        return new QaTopics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QaTopics rename(String name) {
        return new QaTopics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QaTopics rename(Name name) {
        return new QaTopics(name, null);
    }
}

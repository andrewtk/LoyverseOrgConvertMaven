/*
 * This file is generated by jOOQ.
*/
package DBnewLogrExtra.tables.daos;


import DBnewLogrExtra.tables.pojos.Votes;
import DBnewLogrExtra.tables.records.VotesRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import javax.annotation.Generated;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VotesDao extends DAOImpl<VotesRecord, Votes, Integer> {

    /**
     * Create a new VotesDao without any configuration
     */
    public VotesDao() {
        super(DBnewLogrExtra.tables.Votes.VOTES, Votes.class);
    }

    /**
     * Create a new VotesDao with an attached configuration
     */
    public VotesDao(Configuration configuration) {
        super(DBnewLogrExtra.tables.Votes.VOTES, Votes.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(Votes object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<Votes> fetchById(Integer... values) {
        return fetch(DBnewLogrExtra.tables.Votes.VOTES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Votes fetchOneById(Integer value) {
        return fetchOne(DBnewLogrExtra.tables.Votes.VOTES.ID, value);
    }

    /**
     * Fetch records that have <code>qsid IN (values)</code>
     */
    public List<Votes> fetchByQsid(Integer... values) {
        return fetch(DBnewLogrExtra.tables.Votes.VOTES.QSID, values);
    }

    /**
     * Fetch a unique record that has <code>qsid = value</code>
     */
    public Votes fetchOneByQsid(Integer value) {
        return fetchOne(DBnewLogrExtra.tables.Votes.VOTES.QSID, value);
    }

    /**
     * Fetch records that have <code>answid IN (values)</code>
     */
    public List<Votes> fetchByAnswid(Integer... values) {
        return fetch(DBnewLogrExtra.tables.Votes.VOTES.ANSWID, values);
    }

    /**
     * Fetch a unique record that has <code>answid = value</code>
     */
    public Votes fetchOneByAnswid(Integer value) {
        return fetchOne(DBnewLogrExtra.tables.Votes.VOTES.ANSWID, value);
    }

    /**
     * Fetch records that have <code>comid IN (values)</code>
     */
    public List<Votes> fetchByComid(Integer... values) {
        return fetch(DBnewLogrExtra.tables.Votes.VOTES.COMID, values);
    }

    /**
     * Fetch a unique record that has <code>comid = value</code>
     */
    public Votes fetchOneByComid(Integer value) {
        return fetchOne(DBnewLogrExtra.tables.Votes.VOTES.COMID, value);
    }

    /**
     * Fetch records that have <code>balance IN (values)</code>
     */
    public List<Votes> fetchByBalance(Integer... values) {
        return fetch(DBnewLogrExtra.tables.Votes.VOTES.BALANCE, values);
    }

    /**
     * Fetch records that have <code>upvotes IN (values)</code>
     */
    public List<Votes> fetchByUpvotes(Integer... values) {
        return fetch(DBnewLogrExtra.tables.Votes.VOTES.UPVOTES, values);
    }

    /**
     * Fetch records that have <code>downvotes IN (values)</code>
     */
    public List<Votes> fetchByDownvotes(Integer... values) {
        return fetch(DBnewLogrExtra.tables.Votes.VOTES.DOWNVOTES, values);
    }
}

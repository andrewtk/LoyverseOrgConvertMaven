/*
 * This file is generated by jOOQ.
*/
package DBnewLogrExtra.tables.daos;


import DBnewLogrExtra.tables.pojos.Questions;
import DBnewLogrExtra.tables.records.QuestionsRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionsDao extends DAOImpl<QuestionsRecord, Questions, Integer> {

    /**
     * Create a new QuestionsDao without any configuration
     */
    public QuestionsDao() {
        super(DBnewLogrExtra.tables.Questions.QUESTIONS, Questions.class);
    }

    /**
     * Create a new QuestionsDao with an attached configuration
     */
    public QuestionsDao(Configuration configuration) {
        super(DBnewLogrExtra.tables.Questions.QUESTIONS, Questions.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(Questions object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<Questions> fetchById(Integer... values) {
        return fetch(DBnewLogrExtra.tables.Questions.QUESTIONS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Questions fetchOneById(Integer value) {
        return fetchOne(DBnewLogrExtra.tables.Questions.QUESTIONS.ID, value);
    }

    /**
     * Fetch records that have <code>userid IN (values)</code>
     */
    public List<Questions> fetchByUserid(Integer... values) {
        return fetch(DBnewLogrExtra.tables.Questions.QUESTIONS.USERID, values);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<Questions> fetchByTitle(String... values) {
        return fetch(DBnewLogrExtra.tables.Questions.QUESTIONS.TITLE, values);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<Questions> fetchByContent(String... values) {
        return fetch(DBnewLogrExtra.tables.Questions.QUESTIONS.CONTENT, values);
    }

    /**
     * Fetch records that have <code>views IN (values)</code>
     */
    public List<Questions> fetchByViews(Integer... values) {
        return fetch(DBnewLogrExtra.tables.Questions.QUESTIONS.VIEWS, values);
    }

    /**
     * Fetch records that have <code>slug IN (values)</code>
     */
    public List<Questions> fetchBySlug(String... values) {
        return fetch(DBnewLogrExtra.tables.Questions.QUESTIONS.SLUG, values);
    }

    /**
     * Fetch a unique record that has <code>slug = value</code>
     */
    public Questions fetchOneBySlug(String value) {
        return fetchOne(DBnewLogrExtra.tables.Questions.QUESTIONS.SLUG, value);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<Questions> fetchByStatus(String... values) {
        return fetch(DBnewLogrExtra.tables.Questions.QUESTIONS.STATUS, values);
    }

    /**
     * Fetch records that have <code>mailme IN (values)</code>
     */
    public List<Questions> fetchByMailme(Byte... values) {
        return fetch(DBnewLogrExtra.tables.Questions.QUESTIONS.MAILME, values);
    }

    /**
     * Fetch records that have <code>segment IN (values)</code>
     */
    public List<Questions> fetchBySegment(String... values) {
        return fetch(DBnewLogrExtra.tables.Questions.QUESTIONS.SEGMENT, values);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<Questions> fetchByCreated(Timestamp... values) {
        return fetch(DBnewLogrExtra.tables.Questions.QUESTIONS.CREATED, values);
    }

    /**
     * Fetch records that have <code>updated IN (values)</code>
     */
    public List<Questions> fetchByUpdated(Timestamp... values) {
        return fetch(DBnewLogrExtra.tables.Questions.QUESTIONS.UPDATED, values);
    }
}
